// Base class
class Shape {
    // Method to be overridden
    double area() {
        System.out.println("Calculating area of a generic shape...");
        return 0;
    }

    // Overloaded method (compile-time polymorphism)
    double area(double radius) {
        System.out.println("Calculating area of a circle using Shape's overloaded method...");
        return Math.PI * radius * radius;
    }

    // Another overloaded method
    double area(double length, double breadth) {
        System.out.println("Calculating area of a rectangle using Shape's overloaded method...");
        return length * breadth;
    }
}

// Subclass 1: Circle
class Circle extends Shape {
    double radius;

    Circle(double radius) {
        this.radius = radius;
    }

    // Overridden method (runtime polymorphism)
    @Override
    double area() {
        System.out.println("Calculating area of Circle...");
        return Math.PI * radius * radius;
    }
}

// Subclass 2: Rectangle
class Rectangle extends Shape {
    double length, breadth;

    Rectangle(double length, double breadth) {
        this.length = length;
        this.breadth = breadth;
    }

    // Overridden method (runtime polymorphism)
    @Override
    double area() {
        System.out.println("Calculating area of Rectangle...");
        return length * breadth;
    }
}

// Main class
public class polymorphism {
    public static void main(String[] args) {

        // Runtime Polymorphism (method overriding)
        Shape s1 = new Circle(5.0);
        Shape s2 = new Rectangle(4.0, 6.0);

        System.out.println("Runtime Polymorphism (Overriding):");
        System.out.println("Area of Circle: " + s1.area());
        System.out.println("Area of Rectangle: " + s2.area());

        // Compile-time Polymorphism (method overloading)
        Shape s3 = new Shape();
        System.out.println("\nCompile-time Polymorphism (Overloading):");
        System.out.println("Area of Circle using overloaded method: " + s3.area(7.0));
        System.out.println("Area of Rectangle using overloaded method: " + s3.area(3.0, 8.0));
    }
}
